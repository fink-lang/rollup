{createFilter} = import '@rollup/pluginutils'

{parse} = import '@fink/larix/parser.fnk'
{generate} = import '@fink/loxia/generate.fnk'

{error, is_error} = import '@fink/std-lib/error.fnk'
{is_empty} = import '@fink/std-lib/iter.fnk'

{null} = import '@fink/js-interop/nullish.fnk'



transform = fn source, filename, options:
  ast = parse source, filename

  match ast:
    {errors: is_empty ?}:
      generate
        ast, filename, source
        rec:
          babel: {babelrc: false, configFile: false}
          import.ext: {abs: '.js', rel: '.fnk'}
          ...options
    else:
      {errors: ast.errors}



fink = fn options={include: './**/*.fnk'}: rec:
  transform: fn source, id:
    rollup_filter = createFilter options.include, options.exclude

    match id:
      rollup_filter ?:
        {code, source_map, errors} = transform
          source, id, {source_maps: true, ...options}

        match errors:
          is_empty ?:
             {code, map: source_map, moduleSideEffects: false}
          else:
            [err] = errors
            match err:
              is_error ?:
                throw err
              else:
                throw error err.error, {stack: err.stack}

      else:
        null
